// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VAS.Data;

namespace VAS.Data.Migrations
{
    [DbContext(typeof(VASDbContext))]
    [Migration("20190530063920_thanhnt30052019")]
    partial class thanhnt30052019
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("VAS.Model.Block", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("DoctorId");

                    b.Property<bool>("IsAvailable");

                    b.Property<bool>("IsFull");

                    b.Property<Guid>("RoomId");

                    b.Property<Guid>("SchedulingId");

                    b.Property<TimeSpan>("StartTime");

                    b.Property<int>("TotalTicket");

                    b.Property<string>("UpdatedByUserName");

                    b.HasKey("Id");

                    b.HasIndex("SchedulingId");

                    b.HasIndex("DoctorId", "StartTime", "Date")
                        .IsUnique()
                        .HasFilter("[DoctorId] IS NOT NULL");

                    b.HasIndex("RoomId", "StartTime", "Date")
                        .IsUnique();

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("VAS.Model.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("CMND");

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<bool>("Gender");

                    b.Property<string>("HisCode");

                    b.Property<string>("Job");

                    b.Property<string>("Nation");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("UpdatedByUserName");

                    b.Property<string>("WorkPlace");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("VAS.Model.DoctorBasic", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<bool>("Gender");

                    b.Property<string>("HisCode");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("UpdatedByUserName");

                    b.HasKey("Id");

                    b.HasIndex("HisCode")
                        .IsUnique()
                        .HasFilter("[HisCode] IS NOT NULL");

                    b.ToTable("DoctorBasics");
                });

            modelBuilder.Entity("VAS.Model.DoctorPro", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certification");

                    b.Property<string>("Degree");

                    b.Property<string>("Experience");

                    b.Property<string>("Language");

                    b.HasKey("Id");

                    b.ToTable("DoctorPros");
                });

            modelBuilder.Entity("VAS.Model.Family", b =>
                {
                    b.Property<Guid>("CustomerId");

                    b.Property<string>("MyUserId");

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Relationship");

                    b.Property<string>("UpdatedByUserName");

                    b.HasKey("CustomerId", "MyUserId");

                    b.HasIndex("MyUserId");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("VAS.Model.MyUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCustomer");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("VAS.Model.Nurse", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<bool>("Gender");

                    b.Property<string>("HisCode");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("UpdatedByUserName");

                    b.HasKey("Id");

                    b.ToTable("Nurses");
                });

            modelBuilder.Entity("VAS.Model.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("HisCode");

                    b.Property<bool>("IsAvailable");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<Guid>("SpecialityId");

                    b.Property<string>("UpdatedByUserName");

                    b.HasKey("Id");

                    b.HasIndex("HisCode")
                        .IsUnique()
                        .HasFilter("[HisCode] IS NOT NULL");

                    b.HasIndex("Number")
                        .IsUnique()
                        .HasFilter("[Number] IS NOT NULL");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("VAS.Model.Scheduling", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("DoctorId");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<bool>("IsAvailable");

                    b.Property<string>("NurseId");

                    b.Property<Guid>("RoomId");

                    b.Property<string>("SpecialityName");

                    b.Property<TimeSpan>("StartTime");

                    b.Property<int>("TotalTicket");

                    b.Property<string>("UpdatedByUserName");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("NurseId");

                    b.HasIndex("RoomId");

                    b.ToTable("Schedulings");
                });

            modelBuilder.Entity("VAS.Model.Speciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Name");

                    b.Property<string>("UpdatedByUserName");

                    b.HasKey("Id");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("VAS.Model.SpecialityDoctor", b =>
                {
                    b.Property<string>("DoctorBasicId");

                    b.Property<Guid>("SpecialityId");

                    b.HasKey("DoctorBasicId", "SpecialityId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("SpecialityDoctor");
                });

            modelBuilder.Entity("VAS.Model.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BlockId");

                    b.Property<DateTime?>("BookingDate");

                    b.Property<string>("CreatedByUserName");

                    b.Property<string>("CustomerId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Index");

                    b.Property<string>("Note");

                    b.Property<string>("UpdatedByUserName");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VAS.Model.MyUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VAS.Model.MyUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VAS.Model.MyUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VAS.Model.MyUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VAS.Model.Block", b =>
                {
                    b.HasOne("VAS.Model.Scheduling", "Scheduling")
                        .WithMany("Blocks")
                        .HasForeignKey("SchedulingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VAS.Model.DoctorBasic", b =>
                {
                    b.HasOne("VAS.Model.MyUser", "MyUser")
                        .WithOne("Doctor")
                        .HasForeignKey("VAS.Model.DoctorBasic", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VAS.Model.DoctorPro", b =>
                {
                    b.HasOne("VAS.Model.DoctorBasic", "DoctorBasic")
                        .WithOne("DoctorPro")
                        .HasForeignKey("VAS.Model.DoctorPro", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VAS.Model.Family", b =>
                {
                    b.HasOne("VAS.Model.Customer", "Customer")
                        .WithMany("Families")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VAS.Model.MyUser", "MyUser")
                        .WithMany("Families")
                        .HasForeignKey("MyUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VAS.Model.Nurse", b =>
                {
                    b.HasOne("VAS.Model.MyUser", "MyUser")
                        .WithOne("Nurse")
                        .HasForeignKey("VAS.Model.Nurse", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VAS.Model.Room", b =>
                {
                    b.HasOne("VAS.Model.Speciality", "Speciality")
                        .WithMany("Rooms")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VAS.Model.Scheduling", b =>
                {
                    b.HasOne("VAS.Model.DoctorBasic", "Doctor")
                        .WithMany("Schedulings")
                        .HasForeignKey("DoctorId");

                    b.HasOne("VAS.Model.Nurse", "Nurse")
                        .WithMany("Schedulings")
                        .HasForeignKey("NurseId");

                    b.HasOne("VAS.Model.Room", "Room")
                        .WithMany("Schedulings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VAS.Model.SpecialityDoctor", b =>
                {
                    b.HasOne("VAS.Model.DoctorBasic", "DoctorBasic")
                        .WithMany("SpecialityDoctors")
                        .HasForeignKey("DoctorBasicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VAS.Model.Speciality", "Speciality")
                        .WithMany("SpecialityDoctors")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VAS.Model.Ticket", b =>
                {
                    b.HasOne("VAS.Model.Block", "Block")
                        .WithMany("Tickets")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
